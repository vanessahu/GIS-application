# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# Simple Binary Eagle Habitat Model.py
# Created on: 2015-12-06 21:22:46.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# This is a simple binary model to provide an example of a geoprocessing model that uses raster data and to show how setting environments within a model overrides application environment settings.
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy


# Local variables:
Roads = "Roads"
RoadsDistance = "C:\\Application\\Xien_1113\\MapAlgebra\\ScratchData.gdb\\RoadsDistance"
Input_raster_or_constant_value_2__3_ = "500"
MinDisturbance = "C:\\Application\\Xien_1113\\MapAlgebra\\ScratchData.gdb\\MinDisturbance"
CrownCover = "CrownCover"
Input_raster_or_constant_value_2__4_ = "8"
IdealNesting = "C:\\Application\\Xien_1113\\MapAlgebra\\ScratchData.gdb\\IdealNesting"
Water = "Water"
WaterDistance = "C:\\Application\\Xien_1113\\MapAlgebra\\ScratchData.gdb\\WaterDistance"
Input_raster_or_constant_value_2 = "1500"
WaterLTE1500 = "C:\\Application\\Xien_1113\\MapAlgebra\\ScratchData.gdb\\WaterLTE1500"
Streams = "Streams"
StreamsDistance = "C:\\Application\\Xien_1113\\MapAlgebra\\ScratchData.gdb\\StreamsDistance"
Input_raster_or_constant_value_2__2_ = "1500"
StreamsLTE1500 = "C:\\Application\\Xien_1113\\MapAlgebra\\ScratchData.gdb\\StreamsLTE1500"
IdealForFishing = "C:\\Application\\Xien_1113\\MapAlgebra\\ScratchData.gdb\\IdealForFishing"
NextXFish = "C:\\Application\\Xien_1113\\MapAlgebra\\ScratchData.gdb\\NextXFish"
PotentialHabitat = "C:\\Application\\Xien_1113\\MapAlgebra\\ScratchData.gdb\\PotentialHabitat"
Output_direction_raster = ""
Output_direction_raster__2_ = ""
Output_direction_raster__3_ = ""

# Process: Euclidean Distance (3)
arcpy.gp.EucDistance_sa(Roads, RoadsDistance, "", "100", Output_direction_raster__3_)

# Process: Greater Than
arcpy.gp.GreaterThan_sa(RoadsDistance, Input_raster_or_constant_value_2__3_, MinDisturbance)

# Process: Equal To
arcpy.gp.EqualTo_sa(CrownCover, Input_raster_or_constant_value_2__4_, IdealNesting)

# Process: Euclidean Distance
arcpy.gp.EucDistance_sa(Water, WaterDistance, "", "100", Output_direction_raster)

# Process: Less Than Equal
arcpy.gp.LessThanEqual_sa(WaterDistance, Input_raster_or_constant_value_2, WaterLTE1500)

# Process: Euclidean Distance (2)
arcpy.gp.EucDistance_sa(Streams, StreamsDistance, "", "100", Output_direction_raster__2_)

# Process: Less Than Equal (2)
arcpy.gp.LessThanEqual_sa(StreamsDistance, Input_raster_or_constant_value_2__2_, StreamsLTE1500)

# Process: Boolean Or
arcpy.gp.BooleanOr_sa(WaterLTE1500, StreamsLTE1500, IdealForFishing)

# Process: Times
arcpy.gp.Times_sa(IdealNesting, IdealForFishing, NextXFish)

# Process: Times (2)
arcpy.gp.Times_sa(MinDisturbance, NextXFish, PotentialHabitat)

